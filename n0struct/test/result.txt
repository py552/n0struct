 INFO     | __main__:main:134 | ================================================================================
 DEBUG    | __main__:main:135 | dict1 == <n0struct..n0dict 1> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 5
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ]
}
 INFO     | __main__:main:136 | ================================================================================
 DEBUG    | __main__:main:137 | dict2 == <n0struct..n0dict 1> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 99
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ]
}
 INFO     | __main__:main:138 | ================================================================================
 DEBUG    | __main__:main:139 | dict3 == <n0struct..n0dict 1> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 99
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ]
}
 INFO     | __main__:test_sorted_lists:56 | ******************************************************************************** 1 = Sorted list in dictionary = direct_compare
 INFO     | __main__:test_sorted_lists:59 | *** differences
 INFO     | __main__:test_sorted_lists:61 | Values are different: dict1['C'][1]['value2']=5 != dict2['C'][1]['value2']=99
 INFO     | __main__:test_sorted_lists:59 | *** not_equal
 INFO     | __main__:test_sorted_lists:61 | ('/C[1]/value2', [5, 99, 94.0])
 INFO     | __main__:test_sorted_lists:59 | *** self_unique
 INFO     | __main__:test_sorted_lists:59 | *** other_unique
 INFO     | __main__:test_sorted_lists:59 | *** difftypes
 INFO     | __main__:test_sorted_lists:63 | ******************************************************************************** 2 = Sorted list in dictionary = wise_compare
 INFO     | __main__:test_sorted_lists:69 | *** differences
 INFO     | __main__:test_sorted_lists:71 | Values are different: dict1['C'][1]['value2']=5 != dict2['C'][1]['value2']=99
 INFO     | __main__:test_sorted_lists:69 | *** not_equal
 INFO     | __main__:test_sorted_lists:71 | ('/C[1]/value2', [5, 99, 94.0])
 INFO     | __main__:test_sorted_lists:69 | *** self_unique
 INFO     | __main__:test_sorted_lists:69 | *** other_unique
 INFO     | __main__:test_sorted_lists:69 | *** difftypes
 INFO     | __main__:test_sorted_lists:73 | ================================================================================
 DEBUG    | __main__:test_sorted_lists:74 | differences1_direct_compare == <n0struct..n0dict 5> {
    "differences": <list 1> [ #0   "Values are different: dict1['C'][1]['value2']=5 != dict2['C'][1]['value2']=99" ],
    "not_equal": <list 1> [
        #0   <tuple 2> (
            #0   "/C[1]/value2",
            #1   <list 3> [
                #0   5,
                #1   99,
                #2   94.0
            ]
        )
    ],
    "self_unique": <list 0> [  ],
    "other_unique": <list 0> [  ],
    "difftypes": <list 0> [  ]
}
 DEBUG    | __main__:test_sorted_lists:75 | notemptyitems(differences1_direct_compare["differences"]) == 1
 DEBUG    | __main__:test_sorted_lists:77 | notemptyitems(differences1_direct_compare["not_equal"]) == 4
 INFO     | __main__:test_sorted_lists:83 | ================================================================================
 DEBUG    | __main__:test_sorted_lists:84 | differences2_wise_compare == <n0struct..n0dict 5> {
    "differences": <list 1> [ #0   "Values are different: dict1['C'][1]['value2']=5 != dict2['C'][1]['value2']=99" ],
    "not_equal": <list 1> [
        #0   <tuple 2> (
            #0   "/C[1]/value2",
            #1   <list 3> [
                #0   5,
                #1   99,
                #2   94.0
            ]
        )
    ],
    "self_unique": <list 0> [  ],
    "other_unique": <list 0> [  ],
    "difftypes": <list 0> [  ]
}
 INFO     | __main__:test_unsorted_lists:92 | ******************************************************************************** 3 = Unsorted list in dictionary = direct_compare
 INFO     | __main__:test_unsorted_lists:95 | *** differences
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][0]['a']=1 != dict3['C'][0]['a']=7
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][0]['b']=2 != dict3['C'][0]['b']=8
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][0]['c']=3 != dict3['C'][0]['c']=9
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][0]['value1']=1 != dict3['C'][0]['value1']=3
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][0]['value2']=4 != dict3['C'][0]['value2']=6
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][1]['value2']=5 != dict3['C'][1]['value2']=99
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][2]['a']=7 != dict3['C'][2]['a']=1
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][2]['b']=8 != dict3['C'][2]['b']=2
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][2]['c']=9 != dict3['C'][2]['c']=3
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][2]['value1']=3 != dict3['C'][2]['value1']=1
 INFO     | __main__:test_unsorted_lists:97 | Values are different: dict1['C'][2]['value2']=6 != dict3['C'][2]['value2']=4
 INFO     | __main__:test_unsorted_lists:97 | List dict3['C'] is longer dict1['C']: dict3['C'][3]='{'a': 1, 'b': 2, 'c': 3, 'value1': 1, 'value2': 4}' doesn't exist in dict1['C']
 INFO     | __main__:test_unsorted_lists:95 | *** not_equal
 INFO     | __main__:test_unsorted_lists:97 | ('/C[0]/a', [1, 7, 6.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[0]/b', [2, 8, 6.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[0]/c', [3, 9, 6.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[0]/value1', [1, 3, 2.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[0]/value2', [4, 6, 2.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[1]/value2', [5, 99, 94.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[2]/a', [7, 1, -6.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[2]/b', [8, 2, -6.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[2]/c', [9, 3, -6.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[2]/value1', [3, 1, -2.0])
 INFO     | __main__:test_unsorted_lists:97 | ('/C[2]/value2', [6, 4, -2.0])
 INFO     | __main__:test_unsorted_lists:95 | *** self_unique
 INFO     | __main__:test_unsorted_lists:95 | *** other_unique
 INFO     | __main__:test_unsorted_lists:97 | ('/C[3]', {'a': 1, 'b': 2, 'c': 3, 'value1': 1, 'value2': 4})
 INFO     | __main__:test_unsorted_lists:95 | *** difftypes
 INFO     | __main__:test_unsorted_lists:99 | ******************************************************************************** 4 = Unsorted list in dictionary = compare
 INFO     | __main__:test_unsorted_lists:105 | *** differences
 INFO     | __main__:test_unsorted_lists:107 | Values are different: dict1['C'][1]['value2']=5 != dict3['C'][1]['value2']=99
 INFO     | __main__:test_unsorted_lists:107 | Element dict3['C'][3]='{'a': 1, 'b': 2, 'c': 3, 'value1': 1, 'value2': 4}' doesn't exist in dict1['C']
 INFO     | __main__:test_unsorted_lists:105 | *** not_equal
 INFO     | __main__:test_unsorted_lists:107 | ('/C[1]/value2', [5, 99, 94.0])
 INFO     | __main__:test_unsorted_lists:105 | *** self_unique
 INFO     | __main__:test_unsorted_lists:105 | *** other_unique
 INFO     | __main__:test_unsorted_lists:107 | ('/C[3]', {'a': 1, 'b': 2, 'c': 3, 'value1': 1, 'value2': 4})
 INFO     | __main__:test_unsorted_lists:105 | *** difftypes
 INFO     | __main__:test_unsorted_lists:109 | ================================================================================
 DEBUG    | __main__:test_unsorted_lists:110 | differences1_direct_compare == <n0struct..n0dict 5> {
    "differences": <list 12> [
        #0   "Values are different: dict1['C'][0]['a']=1 != dict3['C'][0]['a']=7",
        #1   "Values are different: dict1['C'][0]['b']=2 != dict3['C'][0]['b']=8",
        #2   "Values are different: dict1['C'][0]['c']=3 != dict3['C'][0]['c']=9",
        #3   "Values are different: dict1['C'][0]['value1']=1 != dict3['C'][0]['value1']=3",
        #4   "Values are different: dict1['C'][0]['value2']=4 != dict3['C'][0]['value2']=6",
        #5   "Values are different: dict1['C'][1]['value2']=5 != dict3['C'][1]['value2']=99",
        #6   "Values are different: dict1['C'][2]['a']=7 != dict3['C'][2]['a']=1",
        #7   "Values are different: dict1['C'][2]['b']=8 != dict3['C'][2]['b']=2",
        #8   "Values are different: dict1['C'][2]['c']=9 != dict3['C'][2]['c']=3",
        #9   "Values are different: dict1['C'][2]['value1']=3 != dict3['C'][2]['value1']=1",
        #10  "Values are different: dict1['C'][2]['value2']=6 != dict3['C'][2]['value2']=4",
        #11  "List dict3['C'] is longer dict1['C']: dict3['C'][3]='{'a': 1, 'b': 2, 'c': 3, 'value1': 1, 'value2': 4}' doesn't exist in dict1['C']"
    ],
    "not_equal": <list 11> [
        #0   <tuple 2> (
            #0   "/C[0]/a",
            #1   <list 3> [
                #0   1,
                #1   7,
                #2   6.0
            ]
        ),
        #1   <tuple 2> (
            #0   "/C[0]/b",
            #1   <list 3> [
                #0   2,
                #1   8,
                #2   6.0
            ]
        ),
        #2   <tuple 2> (
            #0   "/C[0]/c",
            #1   <list 3> [
                #0   3,
                #1   9,
                #2   6.0
            ]
        ),
        #3   <tuple 2> (
            #0   "/C[0]/value1",
            #1   <list 3> [
                #0   1,
                #1   3,
                #2   2.0
            ]
        ),
        #4   <tuple 2> (
            #0   "/C[0]/value2",
            #1   <list 3> [
                #0   4,
                #1   6,
                #2   2.0
            ]
        ),
        #5   <tuple 2> (
            #0   "/C[1]/value2",
            #1   <list 3> [
                #0   5,
                #1   99,
                #2   94.0
            ]
        ),
        #6   <tuple 2> (
            #0   "/C[2]/a",
            #1   <list 3> [
                #0   7,
                #1   1,
                #2   -6.0
            ]
        ),
        #7   <tuple 2> (
            #0   "/C[2]/b",
            #1   <list 3> [
                #0   8,
                #1   2,
                #2   -6.0
            ]
        ),
        #8   <tuple 2> (
            #0   "/C[2]/c",
            #1   <list 3> [
                #0   9,
                #1   3,
                #2   -6.0
            ]
        ),
        #9   <tuple 2> (
            #0   "/C[2]/value1",
            #1   <list 3> [
                #0   3,
                #1   1,
                #2   -2.0
            ]
        ),
        #10  <tuple 2> (
            #0   "/C[2]/value2",
            #1   <list 3> [
                #0   6,
                #1   4,
                #2   -2.0
            ]
        )
    ],
    "self_unique": <list 0> [  ],
    "other_unique": <list 1> [
        #0   <tuple 2> (
            #0   "/C[3]",
            #1   <n0struct..n0dict 5> {
                "a": 1,
                "b": 2,
                "c": 3,
                "value1": 1,
                "value2": 4
            }
        )
    ],
    "difftypes": <list 0> [  ]
}
 DEBUG    | __main__:test_unsorted_lists:111 | notemptyitems(differences1_direct_compare["differences"] == 12
 DEBUG    | __main__:test_unsorted_lists:113 | differences1_direct_compare["not_equal"] == 44
 DEBUG    | __main__:test_unsorted_lists:116 | notemptyitems(differences1_direct_compare["other_unique"]) == 6
 DEBUG    | __main__:test_unsorted_lists:118 | notemptyitems(differences1_direct_compare["self_unique"]) == 0
 INFO     | __main__:test_unsorted_lists:121 | ================================================================================
 DEBUG    | __main__:test_unsorted_lists:122 | differences2_wise_compare == <n0struct..n0dict 5> {
    "differences": <list 2> [
        #0   "Values are different: dict1['C'][1]['value2']=5 != dict3['C'][1]['value2']=99",
        #1   "Element dict3['C'][3]='{'a': 1, 'b': 2, 'c': 3, 'value1': 1, 'value2': 4}' doesn't exist in dict1['C']"
    ],
    "not_equal": <list 1> [
        #0   <tuple 2> (
            #0   "/C[1]/value2",
            #1   <list 3> [
                #0   5,
                #1   99,
                #2   94.0
            ]
        )
    ],
    "self_unique": <list 0> [  ],
    "other_unique": <list 1> [
        #0   <tuple 2> (
            #0   "/C[3]",
            #1   <n0struct..n0dict 5> {
                "a": 1,
                "b": 2,
                "c": 3,
                "value1": 1,
                "value2": 4
            }
        )
    ],
    "difftypes": <list 0> [  ]
}
 DEBUG    | __main__:test_unsorted_lists:123 | notemptyitems(differences2_wise_compare["differences"] == 2
 DEBUG    | __main__:test_unsorted_lists:125 | differences2_wise_compare["not_equal"] == 4
 DEBUG    | __main__:test_unsorted_lists:128 | notemptyitems(differences2_wise_compare["other_unique"]) == 6
 DEBUG    | __main__:test_unsorted_lists:130 | notemptyitems(differences2_wise_compare["self_unique"]) == 0
 DEBUG    | __main__:main:144 | dict1 == <n0struct..n0dict 1> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 5
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ]
}
 DEBUG    | __main__:main:146 | dict1 == <n0struct..n0dict 2> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 5
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ],
    "moreone": <n0struct..n0dict 1> { "node": <n0struct..n0list 1> [ #0   <n0struct..n0dict 1> { "value": <n0struct..n0dict 0> {  } } ] }
}
 DEBUG    | __main__:main:148 | dict1 == <n0struct..n0dict 2> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 5
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ],
    "moreone": <n0struct..n0dict 1> {
        "node": <n0struct..n0list 2> [
            #0   <n0struct..n0dict 1> { "value": <n0struct..n0dict 0> {  } },
            #1   <n0struct..n0dict 1> { "value": None }
        ]
    }
}
 DEBUG    | __main__:main:151 | dict1 == <n0struct..n0dict 2> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 5
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ],
    "moreone": <n0struct..n0dict 1> {
        "node": <n0struct..n0list 3> [
            #0   <n0struct..n0dict 1> { "value": <n0struct..n0dict 0> {  } },
            #1   <n0struct..n0dict 1> { "value": None },
            #2   <n0struct..n0dict 1> { "value": "" }
        ]
    }
}
 DEBUG    | __main__:main:153 | dict1 == <n0struct..n0dict 2> {
    "C": <n0struct..n0list 3> [
        #0   <n0struct..n0dict 5> {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        #1   <n0struct..n0dict 5> {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 5
        },
        #2   <n0struct..n0dict 5> {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ],
    "moreone": <n0struct..n0dict 1> {
        "node": <n0struct..n0list 4> [
            #0   <n0struct..n0dict 1> { "value": <n0struct..n0dict 0> {  } },
            #1   <n0struct..n0dict 1> { "value": None },
            #2   <n0struct..n0dict 1> { "value": "" },
            #3   <n0struct..n0dict 1> { "value": 1 }
        ]
    }
}
 INFO     | __main__:main:167 | {
    "C": [
        {
            "a": 1,
            "b": 2,
            "c": 3,
            "value1": 1,
            "value2": 4
        },
        {
            "a": 4,
            "b": 5,
            "c": 6,
            "value1": 2,
            "value2": 5
        },
        {
            "a": 7,
            "b": 8,
            "c": 9,
            "value1": 3,
            "value2": 6
        }
    ],
    "moreone": {
        "node": [
            { "value": {  } },
            { "value": null },
            { "value": "" },
            {
                "value": 2,
                "code": "two"
            },
            {
                "value": 4,
                "code": "four"
            }
        ]
    }
}
 INFO     | __main__:main:168 | <?xml version="1.0" encoding="utf-8"?>
<C>
    <a>1</a>
    <b>2</b>
    <c>3</c>
    <value1>1</value1>
    <value2>4</value2>
    <a>4</a>
    <b>5</b>
    <c>6</c>
    <value1>2</value1>
    <value2>5</value2>
    <a>7</a>
    <b>8</b>
    <c>9</c>
    <value1>3</value1>
    <value2>6</value2>
</C>
<moreone>
    <node>
        <value/>
        <value/>
        <value></value>
        <value>2</value>
        <code>two</code>
        <value>4</value>
        <code>four</code>
    </node>
</moreone>
 INFO     | __main__:main:169 | <C>
    <a>1</a>
    <b>2</b>
    <c>3</c>
    <value1>1</value1>
    <value2>4</value2>
    <a>4</a>
    <b>5</b>
    <c>6</c>
    <value1>2</value1>
    <value2>5</value2>
    <a>7</a>
    <b>8</b>
    <c>9</c>
    <value1>3</value1>
    <value2>6</value2>
</C>
<moreone>
    <node>
        <value/>
        <value/>
        <value></value>
        <value>2</value>
        <code>two</code>
        <value>4</value>
        <code>four</code>
    </node>
</moreone>
 INFO     | __main__:main:179 | ['<![CDATA[[{"key":"CN-BILLING_DAY","value":"27"},{"key":"CN-CARD_TARIFF","value":"PCT_001"}]]]>', '<![CDATA[[{"key":"CN-SALES_BRANCH","value":"Main Office"},{"key":"CN-SALES_CAMPAIGN","value":"New Year"}]]]>', '<![CDATA[[{"key":"CN-SALES_DET_1","value":"New Year Offer"},{"key":"CN-SALES_MG","value":"John Smith"}]]]>']
 INFO     | __main__:main:180 | ['<![CDATA[["CN-BILLING_DAY":"27","CN-CARD_TARIFF":"PCT_001","CN-SALES_BRANCH":"Main Office"]]]>', '<![CDATA[["CN-SALES_CAMPAIGN":"New Year","CN-SALES_DET_1":"New Year Offer","CN-SALES_MG":"John Smith"]]]>']
 INFO     | __main__:main:181 | ['{"CN-BILLING_DAY":"27","CN-CARD_TARIFF":"PCT_001","CN-SALES_BRANCH":"Main Office"}', '{"CN-SALES_CAMPAIGN":"New Year","CN-SALES_DET_1":"New Year Offer","CN-SALES_MG":"John Smith"}']
 INFO     | __main__:main:186 | [{'value': {}}, {'value': None}, {'value': ''}, {'value': 2, 'code': 'two'}, {'value': 4, 'code': 'four'}]
 INFO     | __main__:main:191 | {'node': [{'value': {}}, {'value': None}, {'value': ''}, {'value': 2, 'code': 'two'}, {'value': 4, 'code': 'four'}]}
 INFO     | __main__:main:194 | [4]
 INFO     | __main__:main:199 | [2]
 INFO     | __main__:main:203 | [6]
 INFO     | __main__:main:208 | [6]
 INFO     | __main__:main:213 | 7
 INFO     | __main__:main:216 | 7
 INFO     | __main__:main:219 | 
 INFO     | __main__:main:222 | 
 DEBUG    | __main__:main:254 | dict_from_json_default == <n0struct..n0dict 1> {
    "root": <n0struct..n0dict 3> {
        "a": 1.0,
        "b": <n0struct..n0dict 2> {
            "c": 2,
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": 3 },
                "g": <list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": 5 }
                ],
                "i": <list 1> [ #0   <n0struct..n0dict 1> { "j": 6 } ]
            }
        },
        "k": <list 2> [
            #0   7,
            #1   8
        ]
    }
}
 DEBUG    | __main__:main:274 | dict_from_json_force_n0dict == <n0struct..n0dict 2> {
    "root": <n0struct..n0dict 3> {
        "a": 1.0,
        "b": <n0struct..n0dict 2> {
            "c": 2,
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": 3 },
                "g": <list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": 5 }
                ],
                "i": <list 1> [ #0   <n0struct..n0dict 1> { "j": 6 } ]
            }
        },
        "k": <list 2> [
            #0   7,
            #1   8
        ]
    },
    "force_n0dict": True
}
 DEBUG    | __main__:main:294 | dict_from_json_recursevely == <n0struct..n0dict 1> {
    "root": <n0struct..n0dict 3> {
        "a": 1.0,
        "b": <n0struct..n0dict 2> {
            "c": 2,
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": 3 },
                "g": <n0struct..n0list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": 5 }
                ],
                "i": <n0struct..n0list 1> [ #0   <n0struct..n0dict 1> { "j": 6 } ]
            }
        },
        "k": <n0struct..n0list 2> [
            #0   7,
            #1   8
        ]
    }
}
 DEBUG    | __main__:main:314 | dict_from_json_recursevely_force_n0dict == <n0struct..n0dict 1> {
    "root": <n0struct..n0dict 3> {
        "a": 1.0,
        "b": <n0struct..n0dict 2> {
            "c": 2,
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": 3 },
                "g": <n0struct..n0list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": 5 }
                ],
                "i": <n0struct..n0list 1> [ #0   <n0struct..n0dict 1> { "j": 6 } ]
            }
        },
        "k": <n0struct..n0list 2> [
            #0   7,
            #1   8
        ]
    }
}
 DEBUG    | __main__:main:358 | dict_from_xml_default == <n0struct..n0dict 1> {
    "root": <n0struct..n0dict 3> {
        "a": "1",
        "b": <n0struct..n0dict 2> {
            "c": "2",
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": "3" },
                "g": <list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": "5" }
                ],
                "i": <n0struct..n0dict 1> { "j": "6" }
            }
        },
        "k": <list 2> [
            #0   "7",
            #1   "8"
        ]
    }
}
 DEBUG    | __main__:main:379 | dict_from_xml_force_n0dict == <n0struct..n0dict 2> {
    "root": <n0struct..n0dict 3> {
        "a": "1",
        "b": <n0struct..n0dict 2> {
            "c": "2",
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": "3" },
                "g": <list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": "5" }
                ],
                "i": <n0struct..n0dict 1> { "j": "6" }
            }
        },
        "k": <list 2> [
            #0   "7",
            #1   "8"
        ]
    },
    "force_n0dict": True
}
 DEBUG    | __main__:main:399 | dict_from_xml_recursevely == <n0struct..n0dict 1> {
    "root": <n0struct..n0dict 3> {
        "a": "1",
        "b": <n0struct..n0dict 2> {
            "c": "2",
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": "3" },
                "g": <n0struct..n0list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": "5" }
                ],
                "i": <n0struct..n0dict 1> { "j": "6" }
            }
        },
        "k": <n0struct..n0list 2> [
            #0   "7",
            #1   "8"
        ]
    }
}
 DEBUG    | __main__:main:419 | dict_from_xml_recursevely_force_n0dict == <n0struct..n0dict 1> {
    "root": <n0struct..n0dict 3> {
        "a": "1",
        "b": <n0struct..n0dict 2> {
            "c": "2",
            "d": <n0struct..n0dict 3> {
                "e": <n0struct..n0dict 1> { "f": "3" },
                "g": <n0struct..n0list 2> [
                    #0   "4",
                    #1   <n0struct..n0dict 1> { "h": "5" }
                ],
                "i": <n0struct..n0dict 1> { "j": "6" }
            }
        },
        "k": <n0struct..n0list 2> [
            #0   "7",
            #1   "8"
        ]
    }
}
 DEBUG    | __main__:main:440 | dict_from_xml_empty == <n0struct..n0dict 1> { "root": None }
 DEBUG    | __main__:main:456 | dict4 == <n0struct..n0dict 2> {
    "a": 1,
    "b": <n0struct..n0dict 2> {
        "c": 2,
        "d": <n0struct..n0dict 1> { "e": 3 }
    }
}
 DEBUG    | __main__:main:468 | dict4 == <n0struct..n0dict 1> { "a": 1 }
 DEBUG    | __main__:main:481 | dict5 == <n0struct..n0dict 1> { "a": <dict 1> { "b": <dict 1> { "c": <dict 1> { "d": 4 } } } }
 DEBUG    | __main__:main:483 | dict5 == <n0struct..n0dict 1> { "a": <dict 1> { "b": <dict 1> { "c": <dict 0> {  } } } }
 DEBUG    | __main__:main:512 | dict6 == <n0struct..n0dict 1> {
    "Root": <dict 2> {
        "Node1": <dict 2> {
            "Subnode1_1": <list 2> [
                {"tag": "PARAM1", "value": "VALUE1 from subn1_1"   },
                {"tag": "PARM2" , "value": "VALUE2 from subnode1_1"}
            ],
            "Subnode1_2": <list 2> [
                {"tag": "PARAM1", "value": "VALUE1 from subnode1_2"},
                {"tag": "PARAM2", "value": "VALUE2 from subnode1_2"}
            ]
        },
        "Node2": <dict 2> {
            "Subnode2_1": <list 2> [
                {"tag": "PARAM1", "value": "VALUE1 from subnode2_1"},
                {"tag": "PARAM2", "value": "VALUE2 from subnode2_1"}
            ],
            "Subnode2_2": <list 2> [
                {"tag": "PARAM1", "value": "VALUE1 from subnode2_2"},
                {"tag": "PARAM2", "value": "VALUE2 from subnode2_2"}
            ]
        }
    }
}
 DEBUG    | __main__:main:513 | <dict 1> {
    "//Root/Node1": <dict 2> {
        "Subnode1_1": <list 2> [
            {"tag": "PARAM1", "value": "VALUE1 from subn1_1"   },
            {"tag": "PARM2" , "value": "VALUE2 from subnode1_1"}
        ],
        "Subnode1_2": <list 2> [
            {"tag": "PARAM1", "value": "VALUE1 from subnode1_2"},
            {"tag": "PARAM2", "value": "VALUE2 from subnode1_2"}
        ]
    }
}
 DEBUG    | __main__:main:514 | <dict 1> { "//Root/Node2/Subnode2_1[0]/value": "VALUE1 from subnode2_1" }
 INFO     | __main__:main:540 | 
['//Root/Nodes[0][0]/tag']   = "PARAM1"
['//Root/Nodes[0][0]/value'] = "VALUE1 from subnode0_0"
['//Root/Nodes[0][1]/tag']   = "PARAM2"
['//Root/Nodes[0][1]/value'] = "VALUE2 from subnode0_1"
['//Root/Nodes[1][0]/tag']   = "PARAM1"
['//Root/Nodes[1][0]/value'] = "VALUE1 from subnode1_0"
['//Root/Nodes[1][1]/tag']   = "PARAM2"
['//Root/Nodes[1][1]/value'] = "VALUE2 from subnode1_1"
['//Root/Nodes[2][0]/tag']   = "PARAM1"
['//Root/Nodes[2][0]/value'] = "VALUE1 from subnode2_0"
['//Root/Nodes[2][1]/tag']   = "PARAM2"
['//Root/Nodes[2][1]/value'] = "VALUE2 from subnode2_1"
['//Root/Nodes[3][0]/tag']   = "PARAM1"
['//Root/Nodes[3][0]/value'] = "VALUE1 from subnode3_0"
['//Root/Nodes[3][1]/tag']   = "PARAM2"
['//Root/Nodes[3][1]/value'] = "VALUE2 from subnode3_1"

 DEBUG    | __main__:main:542 | "//Root/Nodes/tag[text()==PARAM1]/../value" == <dict 4> {
    "//Root/Nodes[0][0]/value": "VALUE1 from subnode0_0",
    "//Root/Nodes[1][0]/value": "VALUE1 from subnode1_0",
    "//Root/Nodes[2][0]/value": "VALUE1 from subnode2_0",
    "//Root/Nodes[3][0]/value": "VALUE1 from subnode3_0"
}
 INFO     | __main__:<module>:549 | Mission acomplished
 DEBUG    | __main__:test_deserialization:30 | serialized_list == "1;2;3"
 DEBUG    | __main__:test_deserialization:32 | deserialized_list == <list 3> [
    #0   "1",
    #1   "2",
    #2   "3"
]
 DEBUG    | __main__:test_deserialization:36 | serialized_list == "1,2,3"
 DEBUG    | __main__:test_deserialization:38 | deserialized_list == <list 3> [
    #0   "1",
    #1   "2",
    #2   "3"
]
 DEBUG    | __main__:test_deserialization:42 | serialized_list == "1;2;3"
 DEBUG    | __main__:test_deserialization:44 | deserialized_list == <list 4> [
    #0   "1",
    #1   "2",
    #2   "3",
    #3   "444"
]
 DEBUG    | __main__:test_deserialization:49 | serialized_dict == "a=1;b=2;c=3"
 DEBUG    | __main__:test_deserialization:51 | deserialized_dict == <dict 3> {
    "a": "1",
    "b": "2",
    "c": "3"
}
 DEBUG    | __main__:test_deserialization:54 | serialized_dict == "a=1;b=2;c=3"
 DEBUG    | __main__:test_deserialization:55 | get_value_by_tag("b", serialized_dict) == "2"
 DEBUG    | __main__:test_deserialization:60 | serialized_list_of_lists == "a1,a2,a3;b1,b2,b3;c1,c2,c3"
 DEBUG    | __main__:test_deserialization:62 | deserialized_list_of_lists == <list 3> [
    #0   <list 3> [
        #0   "a1",
        #1   "a2",
        #2   "a3"
    ],
    #1   <list 3> [
        #0   "b1",
        #1   "b2",
        #2   "b3"
    ],
    #2   <list 3> [
        #0   "c1",
        #1   "c2",
        #2   "c3"
    ]
]
 INFO     | __main__:<module>:72 | Mission acomplished
 DEBUG    | __main__:test_files_processing:23 | test_ini_path == "C:\\REPO\\n0struct\\n0struct\\test\\test.ini"
 DEBUG    | __main__:test_files_processing:26 | test_ini == <dict 2> { "KEY1": "VALUE1", "KEY3": "VALUE3" }
 DEBUG    | __main__:test_files_processing:33 | test_ini(after save) == <dict 2> { "KEY1": "VALUE1", "KEY3": "VALUE3" }
 DEBUG    | __main__:test_files_processing:86 | CRLF                    read_mode='t' == b'A,B,C\n1,2,3\n4,5,6\n'
 DEBUG    | __main__:test_files_processing:87 | CRLF                    read_mode='b' == b'A,B,C\r\n1,2,3\r\n4,5,6\r\n'
 DEBUG    | __main__:test_files_processing:88 | CRLFlines               read_mode='t' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:89 | CRLFlines               read_mode='b' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:90 | CRLFcsv                 read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:91 | CRLFcsv                 read_mode='b' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'4',
        1: b'5',
        2: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:93 | CRLF(wo last CRLF)      read_mode='t' == b'A,B,C\n1,2,3\n4,5,6'
 DEBUG    | __main__:test_files_processing:94 | CRLF(wo last CRLF)      read_mode='b' == b'A,B,C\r\n1,2,3\r\n4,5,6'
 DEBUG    | __main__:test_files_processing:95 | CRLF(wo last CRLF)lines read_mode='t' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:96 | CRLF(wo last CRLF)lines read_mode='b' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:97 | CRLF(wo last CRLF)csv   read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:98 | CRLF(wo last CRLF)csv   read_mode='b' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'4',
        1: b'5',
        2: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:100 | LF                      read_mode='t' == b'A,B,C\n1,2,3\n4,5,6\n'
 DEBUG    | __main__:test_files_processing:101 | LF                      read_mode='b' == b'A,B,C\n1,2,3\n4,5,6\n'
 DEBUG    | __main__:test_files_processing:102 | LFlines                 read_mode='t' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:103 | LFlines                 read_mode='b' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:104 | LFcsv                   read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:105 | LFcsv                   read_mode='b' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'4',
        1: b'5',
        2: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:107 | LF(wo last CRLF)        read_mode='t' == b'A,B,C\n1,2,3\n4,5,6'
 DEBUG    | __main__:test_files_processing:108 | LF(wo last CRLF)        read_mode='b' == b'A,B,C\n1,2,3\n4,5,6'
 DEBUG    | __main__:test_files_processing:109 | LF(wo last CRLF)lines   read_mode='t' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:110 | LF(wo last CRLF)lines   read_mode='b' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:111 | LF(wo last CRLF)csv     read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:112 | LF(wo last CRLF)csv     read_mode='b' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'4',
        1: b'5',
        2: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:114 | CR                      read_mode='t' == b'A,B,C\n1,2,3\n4,5,6\n'
 DEBUG    | __main__:test_files_processing:115 | CR                      read_mode='b' == b'A,B,C\r1,2,3\r4,5,6\r'
 DEBUG    | __main__:test_files_processing:116 | CRlines                 read_mode='t' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:117 | CRlines                 read_mode='b' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:118 | CRcsv                   read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:119 | CRcsv                   read_mode='b' == <list 1> [
    #0   <n0struct..n0dict 7> {
        0: b'A',
        1: b'B',
        2: b'C\r1',
        3: b'2',
        4: b'3\r4',
        5: b'5',
        6: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:120 | CRcsv                   read_mode='b' EOL='\r' == <list 1> [
    #0   <n0struct..n0dict 7> {
        0: b'A',
        1: b'B',
        2: b'C\r1',
        3: b'2',
        4: b'3\r4',
        5: b'5',
        6: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:122 | CR(wo last CRLF)        read_mode='t' == b'A,B,C\n1,2,3\n4,5,6'
 DEBUG    | __main__:test_files_processing:123 | CR(wo last CRLF)        read_mode='b' == b'A,B,C\r1,2,3\r4,5,6'
 DEBUG    | __main__:test_files_processing:124 | CR(wo last CRLF)lines   read_mode='t' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:125 | CR(wo last CRLF)lines   read_mode='b' == <list 3> [
    #0   "A,B,C",
    #1   "1,2,3",
    #2   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:126 | CR(wo last CRLF)csv     read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:127 | CR(wo last CRLF)csv     read_mode='b' == <list 1> [
    #0   <n0struct..n0dict 7> {
        0: b'A',
        1: b'B',
        2: b'C\r1',
        3: b'2',
        4: b'3\r4',
        5: b'5',
        6: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:128 | CR(wo last CRLF)csv     read_mode='b' EOL='\r' == <list 1> [
    #0   <n0struct..n0dict 7> {
        0: b'A',
        1: b'B',
        2: b'C\r1',
        3: b'2',
        4: b'3\r4',
        5: b'5',
        6: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:130 | LFCR                    read_mode='t' == b'A,B,C\n\n1,2,3\n\n4,5,6\n\n'
 DEBUG    | __main__:test_files_processing:131 | LFCR                    read_mode='b' == b'A,B,C\n\r1,2,3\n\r4,5,6\n\r'
 DEBUG    | __main__:test_files_processing:132 | LFCRlines               read_mode='t' == <list 6> [
    #0   "A,B,C",
    #1   "",
    #2   "1,2,3",
    #3   "",
    #4   "4,5,6",
    #5   ""
]
 DEBUG    | __main__:test_files_processing:133 | LFCRlines               read_mode='b' == <list 6> [
    #0   "A,B,C",
    #1   "",
    #2   "1,2,3",
    #3   "",
    #4   "4,5,6",
    #5   ""
]
 DEBUG    | __main__:test_files_processing:134 | LFCRcsv                 read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:135 | LFCRcsv                 read_mode='b' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'\r1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'\r4',
        1: b'5',
        2: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:136 | LFCRcsv                 read_mode='b' EOL='\n\r' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'\r1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'\r4',
        1: b'5',
        2: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:138 | LFCR(wo last CRLF)      read_mode='t' == b'A,B,C\n\n1,2,3\n\n4,5,6'
 DEBUG    | __main__:test_files_processing:139 | LFCR(wo last CRLF)      read_mode='b' == b'A,B,C\n\r1,2,3\n\r4,5,6'
 DEBUG    | __main__:test_files_processing:140 | LFCR(wo last CRLF)lines read_mode='t' == <list 5> [
    #0   "A,B,C",
    #1   "",
    #2   "1,2,3",
    #3   "",
    #4   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:141 | LFCR(wo last CRLF)lines read_mode='b' == <list 5> [
    #0   "A,B,C",
    #1   "",
    #2   "1,2,3",
    #3   "",
    #4   "4,5,6"
]
 DEBUG    | __main__:test_files_processing:142 | LFCR(wo last CRLF)csv   read_mode='t' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: "A",
        1: "B",
        2: "C"
    },
    #1   <n0struct..n0dict 3> {
        0: "1",
        1: "2",
        2: "3"
    },
    #2   <n0struct..n0dict 3> {
        0: "4",
        1: "5",
        2: "6"
    }
]
 DEBUG    | __main__:test_files_processing:143 | LFCR(wo last CRLF)csv   read_mode='b' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'\r1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'\r4',
        1: b'5',
        2: b'6'
    }
]
 DEBUG    | __main__:test_files_processing:144 | LFCR(wo last CRLF)csv   read_mode='b' EOL='\n\r' == <list 3> [
    #0   <n0struct..n0dict 3> {
        0: b'A',
        1: b'B',
        2: b'C'
    },
    #1   <n0struct..n0dict 3> {
        0: b'\r1',
        1: b'2',
        2: b'3'
    },
    #2   <n0struct..n0dict 3> {
        0: b'\r4',
        1: b'5',
        2: b'6'
    }
]
 INFO     | __main__:<module>:162 | Mission acomplished
 DEBUG    | __main__:test_n0dict:27 | to_xpath_result == """['//C[0]/a']      = \"1\"
['//C[0]/b']      = \"2\"
['//C[0]/c']      = \"3\"
['//C[0]/value1'] = \"1\"
['//C[0]/value2'] = \"4\"
['//C[1]/a']      = \"4\"
['//C[1]/b']      = \"5\"
['//C[1]/c']      = \"6\"
['//C[1]/value1'] = \"2\"
['//C[1]/value2'] = \"5\"
['//C[2]/a']      = \"7\"
['//C[2]/b']      = \"8\"
['//C[2]/c']      = \"9\"
['//C[2]/value1'] = \"3\"
['//C[2]/value2'] = \"6\"
"""
 DEBUG    | __main__:test_n0dict:45 | to_xpath_expected_result == """['//C[0]/a']      = \"1\"
['//C[0]/b']      = \"2\"
['//C[0]/c']      = \"3\"
['//C[0]/value1'] = \"1\"
['//C[0]/value2'] = \"4\"
['//C[1]/a']      = \"4\"
['//C[1]/b']      = \"5\"
['//C[1]/c']      = \"6\"
['//C[1]/value1'] = \"2\"
['//C[1]/value2'] = \"5\"
['//C[2]/a']      = \"7\"
['//C[2]/b']      = \"8\"
['//C[2]/c']      = \"9\"
['//C[2]/value1'] = \"3\"
['//C[2]/value2'] = \"6\"
"""
 INFO     | __main__:<module>:56 | Mission acomplished
 DEBUG    | __main__:test_n0struct_arrays:34 | result == <tuple 2> (
    #0   "",
    #1   ""
)
 DEBUG    | __main__:test_n0struct_arrays:38 | result == <tuple 2> (
    #0   "default_left",
    #1   "default_right"
)
 DEBUG    | __main__:test_n0struct_arrays:42 | result == <tuple 2> (
    #0   "",
    #1   ""
)
 DEBUG    | __main__:test_n0struct_arrays:46 | result == <tuple 2> (
    #0   "tag",
    #1   "value"
)
 DEBUG    | __main__:test_n0struct_arrays:50 | result == <tuple 2> (
    #0   "",
    #1   "www.aaa.com"
)
 DEBUG    | __main__:test_n0struct_arrays:54 | result == <tuple 2> (
    #0   "https",
    #1   "www.aaa.com"
)
 DEBUG    | __main__:test_n0struct_arrays:58 | result == <tuple 2> (
    #0   "",
    #1   "www.aaa.com"
)
 DEBUG    | __main__:test_n0struct_arrays:62 | result == <tuple 2> (
    #0   "www.aaa.com",
    #1   ""
)
 DEBUG    | __main__:test_n0struct_arrays:66 | result == <tuple 2> (
    #0   "www.aaa.com",
    #1   "path/"
)
 DEBUG    | __main__:test_n0struct_arrays:81 | result == <tuple 2> (
    #0   "",
    #1   "tag=value"
)
 DEBUG    | __main__:test_n0struct_arrays:85 | result == <tuple 2> (
    #0   "tag=value",
    #1   ""
)
 INFO     | __main__:<module>:95 | Mission acomplished
 DEBUG    | __main__:test_n0struct_date:23 | result == False
 DEBUG    | __main__:test_n0struct_date:28 | result == <datetime.datetime> 2001-02-09 00:00:00
 DEBUG    | __main__:test_n0struct_date:32 | result == <datetime.date> 2001-02-09
 DEBUG    | __main__:test_n0struct_date:36 | result == False
 DEBUG    | __main__:test_n0struct_date:40 | result == <datetime.date> 2023-05-02
 DEBUG    | __main__:test_n0struct_date:44 | result == <datetime.date> 2020-01-29
 DEBUG    | __main__:test_n0struct_date:48 | result == <datetime.date> 2023-02-05
 DEBUG    | __main__:test_n0struct_date:52 | result == False
 DEBUG    | __main__:test_n0struct_date:56 | result == True
 INFO     | __main__:<module>:67 | Mission acomplished
 DEBUG    | __main__:test_split_with_escape:18 | buffer_str == "AAAA1;BBBB2;CCCC3;DDDD4"
 DEBUG    | __main__:test_split_with_escape:19 | result == <list 4> [
    #0   "AAAA1",
    #1   "BBBB2",
    #2   "CCCC3",
    #3   "DDDD4"
]
 DEBUG    | __main__:test_split_with_escape:20 | expected_result == <list 4> [
    #0   "AAAA1",
    #1   "BBBB2",
    #2   "CCCC3",
    #3   "DDDD4"
]
 DEBUG    | __main__:test_split_with_escape:23 | buffer_str == "\\\\AA\\AA1\\;\\\\BB\\BB2;\\CC\\\\CC3\\\\;DD\\DD4\\\\"
 DEBUG    | __main__:test_split_with_escape:24 | result == <list 3> [
    #0   "\\\\AA\\AA1;\\\\BB\\BB2",
    #1   "\\CC\\\\CC3\\",
    #2   "DD\\DD4\\"
]
 DEBUG    | __main__:test_split_with_escape:25 | expected_result == <list 3> [
    #0   "\\\\AA\\AA1;\\\\BB\\BB2",
    #1   "\\CC\\\\CC3\\",
    #2   "DD\\DD4\\"
]
 DEBUG    | __main__:test_split_with_escape:28 | buffer_str == "\\\\AA\\AA1\\;\\\\BB\\BB2;\\CC\\\\CC3\\\\;DD\\DD4\\\\"
 DEBUG    | __main__:test_split_with_escape:29 | result == <list 3> [
    #0   "\\\\AA\\AA1;\\\\BB\\BB2",
    #1   "\\CC\\\\CC3\\\\",
    #2   "DD\\DD4\\\\"
]
 DEBUG    | __main__:test_split_with_escape:30 | expected_result == <list 3> [
    #0   "\\\\AA\\AA1;\\\\BB\\BB2",
    #1   "\\CC\\\\CC3\\\\",
    #2   "DD\\DD4\\\\"
]
 INFO     | __main__:<module>:41 | Mission acomplished
 INFO     | __main__:test_save_load_file:38 | ******* t OS_DEFAULT
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dictOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_listOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_listOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_strOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_binOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* t -r-n
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* t -n
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-n.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-n.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-n.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-n.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\nStrLine2\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\nStrLine2\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-n.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* t -r
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-r.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\rB=2\rC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\rB=2\rC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-r.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\rStrLine2\rStrLine3\r'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\rStrLine2\rStrLine3\r'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-r.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\rBinLine2\rBinLine3\r'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\rBinLine2\rBinLine3\r'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-r.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\rStrLine2\rStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\rStrLine2\rStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-r.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* t -r-n
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* t -n-r
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\n\rB=2\n\rC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\n\rB=2\n\rC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\n\nB=2\n\nC=3'
 INFO     | __main__:test_save_load_file:66 | Autoconvert is impossible with not standard EOL b'\n\r'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\n\rStrLine2\n\rStrLine3\n\r'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\n\rStrLine2\n\rStrLine3\n\r'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\n\nStrLine2\n\nStrLine3\n\n'
 INFO     | __main__:test_save_load_file:102 | Autoconvert is impossible with not standard EOL b'\n\r'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\n\rBinLine2\n\rBinLine3\n\r'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\n\rBinLine2\n\rBinLine3\n\r'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\n\rStrLine2\n\rStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\n\rStrLine2\n\rStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* t $-n^
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1$\n^B=2$\n^C=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1$\n^B=2$\n^C=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1$\n^B=2$\n^C=3'
 INFO     | __main__:test_save_load_file:66 | Autoconvert is impossible with not standard EOL b'$\n^'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1$\n^StrLine2$\n^StrLine3$\n^'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1$\n^StrLine2$\n^StrLine3$\n^'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1$\n^StrLine2$\n^StrLine3$\n^'
 INFO     | __main__:test_save_load_file:102 | Autoconvert is impossible with not standard EOL b'$\n^'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1$\n^BinLine2$\n^BinLine3$\n^'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1$\n^BinLine2$\n^BinLine3$\n^'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1$\n^StrLine2$\n^StrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1$\n^StrLine2$\n^StrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* b OS_DEFAULT
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dictOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_listOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_listOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_strOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_binOS_DEFAULT.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* b -r-n
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* b -n
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-n.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-n.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-n.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-n.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\nStrLine2\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\nStrLine2\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-n.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* b -r
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-r.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\rB=2\rC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\rB=2\rC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-r.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\rStrLine2\rStrLine3\r'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\rStrLine2\rStrLine3\r'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-r.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\rBinLine2\rBinLine3\r'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\rBinLine2\rBinLine3\r'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-r.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\rStrLine2\rStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\rStrLine2\rStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-r.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* b -r-n
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\r\nB=2\r\nC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3\r\n'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\r\nBinLine2\r\nBinLine3\r\n'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\r\nStrLine2\r\nStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\r\nStrLine2\r\nStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-r-n.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* b -n-r
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1\n\rB=2\n\rC=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1\n\rB=2\n\rC=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1\n\nB=2\n\nC=3'
 INFO     | __main__:test_save_load_file:66 | Autoconvert is impossible with not standard EOL b'\n\r'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1\n\rStrLine2\n\rStrLine3\n\r'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1\n\rStrLine2\n\rStrLine3\n\r'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1\n\nStrLine2\n\nStrLine3\n\n'
 INFO     | __main__:test_save_load_file:102 | Autoconvert is impossible with not standard EOL b'\n\r'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1\n\rBinLine2\n\rBinLine3\n\r'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1\n\rBinLine2\n\rBinLine3\n\r'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1\n\rStrLine2\n\rStrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1\n\rStrLine2\n\rStrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin-n-r.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:test_save_load_file:38 | ******* b $-n^
 INFO     | __main__:test_save_load_file:44 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_dict$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:52 | expected_bin_result == b'A=1$\n^B=2$\n^C=3'
 DEBUG    | __main__:test_save_load_file:54 | read_as_bin_result_ == b'A=1$\n^B=2$\n^C=3'
 DEBUG    | __main__:test_save_load_file:58 | expected_txt_result == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:61 | read_as_txt_result_ == b'A=1\nB=2\nC=3'
 DEBUG    | __main__:test_save_load_file:64 | read_as_txt_result_ == b'A=1$\n^B=2$\n^C=3'
 INFO     | __main__:test_save_load_file:66 | Autoconvert is impossible with not standard EOL b'$\n^'
 INFO     | __main__:test_save_load_file:80 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str_list$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:88 | expected_bin_result == b'StrLine1$\n^StrLine2$\n^StrLine3$\n^'
 DEBUG    | __main__:test_save_load_file:90 | read_as_bin_result_ == b'StrLine1$\n^StrLine2$\n^StrLine3$\n^'
 DEBUG    | __main__:test_save_load_file:94 | expected_txt_result == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:97 | read_as_txt_result_ == b'StrLine1\nStrLine2\nStrLine3\n'
 DEBUG    | __main__:test_save_load_file:100 | read_as_txt_result_ == b'StrLine1$\n^StrLine2$\n^StrLine3$\n^'
 INFO     | __main__:test_save_load_file:102 | Autoconvert is impossible with not standard EOL b'$\n^'
 INFO     | __main__:test_save_load_file:114 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin_list$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:122 | expected_bin_result == b'BinLine1$\n^BinLine2$\n^BinLine3$\n^'
 DEBUG    | __main__:test_save_load_file:124 | read_as_bin_result_ == b'BinLine1$\n^BinLine2$\n^BinLine3$\n^'
 INFO     | __main__:test_save_load_file:134 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_str$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:142 | expected_bin_result == b'StrLine1$\n^StrLine2$\n^StrLine3'
 DEBUG    | __main__:test_save_load_file:144 | read_as_bin_result_ == b'StrLine1$\n^StrLine2$\n^StrLine3'
 INFO     | __main__:test_save_load_file:154 | * tmp_file='C:\Users\lenovo\AppData\Local\Temp\test_bin$-n^.tmp'
 DEBUG    | __main__:test_save_load_file:162 | expected_bin_result == b'BinLine1\nBinLine2\nBinLine3'
 DEBUG    | __main__:test_save_load_file:164 | read_as_bin_result_ == b'BinLine1\nBinLine2\nBinLine3'
 INFO     | __main__:<module>:178 | Mission acomplished
 INFO     | __main__:test_use_external_libraries:11 | C:\REPO\n0struct\n0struct\test\test_n0struct09.py
 DEBUG    | __main__:test_use_external_libraries:12 | <pathlib.WindowsPath> C:\REPO\n0struct\n0struct\test\test_n0struct09.py
 ERROR    | __main__:test_use_external_libraries:13 | C:\REPO\n0struct\n0struct\test\test_n0struct09.py
 WARNING  | __main__:test_use_external_libraries:14 | C:\REPO\n0struct\n0struct\test\test_n0struct09.py
 INFO     | __main__:test_use_external_libraries:15 | C:\REPO\n0struct\n0struct\test\test_n0struct09.py
 INFO     | __main__:<module>:25 | Mission acomplished
 DEBUG    | __main__:test_18_find_return_all_items:174 | item[*]/name[text()="Item 2"] == <list 1> [
    #0   <tuple 2> (
        #0   <list 2> [
            #0   "item[1]",
            #1   "name"
        ],
        #1   "Item 2"
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:178 | item[*]/name[text()="Item 2"][0] == "Item 2"
 DEBUG    | __main__:test_18_find_return_all_items:183 | item[*]/name[text()="Item 2"]/.. == <list 1> [
    #0   <tuple 2> (
        #0   <list 1> [ #0   "item[1]" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 2",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:187 | item[*]/name[text()="Item 2"]/..[0] == <list 1> [
    #0   <tuple 2> (
        #0   "name",
        #1   <dict 2> {
            "value": "Item 2",
            "attrib": <dict 0> {  }
        }
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:192 | find_first=item[*] == <list 1> [
    #0   <tuple 2> (
        #0   <list 1> [ #0   "item[0]" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 1",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:195 | item[*][0] == "Item 1"
 DEBUG    | __main__:test_18_find_return_all_items:200 | item[*] == <list 2> [
    #0   <tuple 2> (
        #0   <list 1> [ #0   "item[0]" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 1",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    ),
    #1   <tuple 2> (
        #0   <list 1> [ #0   "item[1]" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 2",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:203 | item[*][0] == "Item 1"
 DEBUG    | __main__:test_18_find_return_all_items:206 | item[*][1] == "Item 2"
 DEBUG    | __main__:test_18_find_return_all_items:211 | item == <list 2> [
    #0   <tuple 2> (
        #0   <list 1> [ #0   "item" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 1",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    ),
    #1   <tuple 2> (
        #0   <list 1> [ #0   "item[1]" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 2",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:215 | item/name[0] == "Item 1"
 DEBUG    | __main__:test_18_find_return_all_items:219 | item[1]/name[1] == "Item 2"
 DEBUG    | __main__:test_18_find_return_all_items:224 | item[0] == <list 1> [
    #0   <tuple 2> (
        #0   <list 1> [ #0   "item" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 1",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:227 | item[0] == <list 1> [
    #0   <tuple 2> (
        #0   "name",
        #1   <dict 2> {
            "value": "Item 1",
            "attrib": <dict 0> {  }
        }
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:232 | item[1] == <list 1> [
    #0   <tuple 2> (
        #0   <list 1> [ #0   "item[1]" ],
        #1   <list 1> [
            #0   <tuple 2> (
                #0   "name",
                #1   <dict 2> {
                    "value": "Item 2",
                    "attrib": <dict 0> {  }
                }
            )
        ]
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:235 | item[1] == <list 1> [
    #0   <tuple 2> (
        #0   "name",
        #1   <dict 2> {
            "value": "Item 2",
            "attrib": <dict 0> {  }
        }
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:240 | item[2] == <list 0> [  ]
 DEBUG    | __main__:test_18_find_return_all_items:245 | ** == <list 3> [
    #0   <tuple 2> (
        #0   <list 2> [
            #0   "item",
            #1   "name"
        ],
        #1   "Item 1"
    ),
    #1   <tuple 2> (
        #0   <list 2> [
            #0   "item[1]",
            #1   "name"
        ],
        #1   "Item 2"
    ),
    #2   <tuple 2> (
        #0   <list 3> [
            #0   "group",
            #1   "item",
            #2   "name"
        ],
        #1   "Item 3"
    )
]
 DEBUG    | __main__:test_18_find_return_all_items:247 | item/name[0] == "Item 1"
 DEBUG    | __main__:test_18_find_return_all_items:249 | item[1]/name[1] == "Item 2"
 DEBUG    | __main__:test_18_find_return_all_items:251 | group/item/name[2] == "Item 3"
 DEBUG    | __main__:test_18_find_return_all_items:255 | item/name == "Item 1"
 DEBUG    | __main__:test_18_find_return_all_items:256 | results[0][1] == "Item 1"
 DEBUG    | __main__:test_18_find_return_all_items:260 | item[1]/name == "Item 2"
 DEBUG    | __main__:test_18_find_return_all_items:261 | results[1][1] == "Item 2"
 DEBUG    | __main__:test_18_find_return_all_items:265 | group/item/name == "Item 3"
 DEBUG    | __main__:test_18_find_return_all_items:266 | results[2][1] == "Item 3"
 DEBUG    | __main__:test_21_findall:310 | item[0]/name == "Item 1"
 DEBUG    | __main__:test_21_findall:315 | group/item[0]/name == "Item 3"
 DEBUG    | __main__:test_21_findall:320 | nonexistent == "Not Found"
 DEBUG    | __main__:test_21_findall:324 | nonexistent == None
 DEBUG    | __main__:test_21_findall:360 | ARRAY/ELEM[*]/KEY[text()=MYNODE]/../VALUE == <list 2> [
    #0   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[0]",
            #2   "VALUE"
        ],
        #1   "1"
    ),
    #1   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[2]",
            #2   "VALUE"
        ],
        #1   "3"
    )
]
 DEBUG    | __main__:test_21_findall:365 | ARRAY/ELEM[*]/KEY[text()=MYNODE]/../VALUE == <list 1> [
    #0   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[0]",
            #2   "VALUE"
        ],
        #1   "1"
    )
]
 DEBUG    | __main__:test_21_findall:370 | ARRAY/ELEM[1]/KEY[text()=MYNODE]/../VALUE == <list 0> [  ]
 DEBUG    | __main__:test_21_findall:375 | */ELEM[*]/KEY[text()=MYNODE]/../VALUE == <list 2> [
    #0   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[0]",
            #2   "VALUE"
        ],
        #1   "1"
    ),
    #1   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[2]",
            #2   "VALUE"
        ],
        #1   "3"
    )
]
 DEBUG    | __main__:test_21_findall:381 | **/KEY[text()=MYNODE]/../VALUE == <list 2> [
    #0   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM",
            #2   "VALUE"
        ],
        #1   "1"
    ),
    #1   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[2]",
            #2   "VALUE"
        ],
        #1   "3"
    )
]
 DEBUG    | __main__:test_21_findall:382 | to_dict:**/KEY[text()=MYNODE]/../VALUE == <dict 2> { "ARRAY/ELEM/VALUE": "1", "ARRAY/ELEM[2]/VALUE": "3" }
 DEBUG    | __main__:test_21_findall:383 | to_list_of_dict:**/KEY[text()=MYNODE]/../VALUE == <list 2> [
    #0   <tuple 2> (
        #0   "ARRAY/ELEM/VALUE",
        #1   "1"
    ),
    #1   <tuple 2> (
        #0   "ARRAY/ELEM[2]/VALUE",
        #1   "3"
    )
]
 DEBUG    | __main__:test_21_findall:389 | ** == <list 6> [
    #0   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM",
            #2   "KEY"
        ],
        #1   "MYNODE"
    ),
    #1   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM",
            #2   "VALUE"
        ],
        #1   "1"
    ),
    #2   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[1]",
            #2   "KEY"
        ],
        #1   "OTHERNODE"
    ),
    #3   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[1]",
            #2   "VALUE"
        ],
        #1   "2"
    ),
    #4   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[2]",
            #2   "KEY"
        ],
        #1   "MYNODE"
    ),
    #5   <tuple 2> (
        #0   <list 3> [
            #0   "ARRAY",
            #1   "ELEM[2]",
            #2   "VALUE"
        ],
        #1   "3"
    )
]
 INFO     | __main__:<module>:433 | Mission acomplished
 INFO     | __main__:test_n0compare:23 | assert1 = {
    "only_in_1": [  ],
    "only_in_2": [  ],
    "diffs": {  }
}
 INFO     | __main__:test_n0compare:43 | assert2 = {
    "only_in_1": [  ],
    "only_in_2": [  ],
    "diffs": {
        "/tranzations[0]/authcode": [
            "00000001",
            [
                "/tranzations[0]/authcode",
                "10000001"
            ]
        ],
        "/tranzations[1]/authcode": [
            "00000002",
            [
                "/tranzations[1]/authcode",
                "10000002"
            ]
        ],
        "/tranzations[2]/authcode": [
            "00000003",
            [
                "/tranzations[2]/authcode",
                "10000003"
            ]
        ],
        "/tranzations[3]/authcode": [
            "00000004",
            [
                "/tranzations[3]/authcode",
                "10000004"
            ]
        ],
        "/tranzations[4]/authcode": [
            "00000005",
            [
                "/tranzations[4]/authcode",
                "10000005"
            ]
        ]
    }
}
 INFO     | __main__:test_n0compare:59 | assert3 = {
    "only_in_1": [  ],
    "only_in_2": [  ],
    "diffs": {
        "[0]/authcode": [
            "00000001",
            [
                "[0]/authcode",
                "10000001"
            ]
        ],
        "[1]/authcode": [
            "00000002",
            [
                "[1]/authcode",
                "10000002"
            ]
        ],
        "[2]/authcode": [
            "00000003",
            [
                "[2]/authcode",
                "10000003"
            ]
        ],
        "[3]/authcode": [
            "00000004",
            [
                "[3]/authcode",
                "10000004"
            ]
        ],
        "[4]/authcode": [
            "00000005",
            [
                "[4]/authcode",
                "10000005"
            ]
        ]
    }
}
 INFO     | __main__:test_n0compare:78 | assert4 = {
    "only_in_1": [  ],
    "only_in_2": [  ],
    "diffs": {  }
}
 INFO     | __main__:test_n0compare:93 | assert5 = {
    "only_in_1": [  ],
    "only_in_2": [ "/tranzations[5]" ],
    "diffs": {
        "/tranzations[1]/amount": [
            11,
            [
                "/tranzations[2]/amount",
                12
            ]
        ],
        "/tranzations[1]/authcode": [
            "00000002",
            [
                "/tranzations[2]/authcode",
                "00000003"
            ]
        ],
        "/tranzations[1]/date": [
            "12/01/2025",
            [
                "/tranzations[2]/date",
                "13/01/2025"
            ]
        ],
        "/tranzations[1]/currency": [
            "EUR",
            [
                "/tranzations[2]/currency",
                "GBP"
            ]
        ],
        "/tranzations[4]/authcode": [
            "00000005",
            [
                "/tranzations[4]/authcode",
                "20000005"
            ]
        ]
    }
}
 INFO     | __main__:test_n0compare:109 | assert6 = {
    "only_in_1": [ "/tranzations[1]" ],
    "only_in_2": [
        "/tranzations[2]",
        "/tranzations[5]"
    ],
    "diffs": {
        "/tranzations[4]/authcode": [
            "00000005",
            [
                "/tranzations[4]/authcode",
                "20000005"
            ]
        ]
    }
}
 INFO     | __main__:<module>:127 | Mission acomplished
 INFO     | __main__:test_n1dict_n1list:27 | assert1 = [
    {"name": "John", "tags": "admin"},
    {
        "name": "Jane",
        "tags": ["user", "active"]
    }
]
 INFO     | __main__:test_n1dict_n1list:30 | [
    {"name": "John", "tags": "admin"},
    {
        "name": "Jane",
        "tags": ["user", "active"]
    }
]
 INFO     | __main__:test_n1dict_n1list:31 | <?xml version="1.0" encoding="utf-8"?>

<item_0>
    <name>John</name>
    <tags>admin</tags>
</item_0>

<item_1>
    <name>Jane</name>
    <tags>user</tags>
    <tags>active</tags>
</item_1>
 INFO     | __main__:test_n1dict_n1list:32 | ['[0]/name']    = "John"
['[0]/tags']    = "admin"
['[1]/name']    = "Jane"
['[1]/tags[0]'] = "user"
['[1]/tags[1]'] = "active"
 INFO     | __main__:test_n1dict_n1list:35 | assert2 = {"name": "John", "tags": "admin"}
 INFO     | __main__:test_n1dict_n1list:40 | assert3 = {"name": "John", "tags": "admin"}
 INFO     | __main__:test_n1dict_n1list:44 | assert4 = "John"
 INFO     | __main__:test_n1dict_n1list:49 | assert5 = "admin"
 INFO     | __main__:test_n1dict_n1list:55 | assert6 = ['user', 'passive1']
 INFO     | __main__:test_n1dict_n1list:61 | assert7 = ['user', 'passive2']
 INFO     | __main__:test_n1dict_n1list:67 | assert8 = ['user', 'passive3']
 DEBUG    | __main__:test_n1dict_n1list:88 | _dict == <n0struct..n1dict 2> {
    "users": <list 2> [
        {"name": "John", "tags": "admin"             },
        {"name": "Jane", "tags": ['user', 'active']}
    ],
    "config": <dict 2> {
        "theme": "dark",
        "features": <dict 1> { "notifications": True }
    }
}
 INFO     | __main__:test_n1dict_n1list:90 | {
    "users": [
        {"name": "John", "tags": "admin"},
        {
            "name": "Jane",
            "tags": ["user", "active"]
        }
    ],
    "config": {
        "theme": "dark",
        "features": {"notifications": true}
    }
}
 INFO     | __main__:test_n1dict_n1list:91 | <?xml version="1.0" encoding="utf-8"?>

<users>
    <name>John</name>
    <tags>admin</tags>
</users>
<users>
    <name>Jane</name>
    <tags>user</tags>
    <tags>active</tags>
</users>

<config>
    <theme>dark</theme>
    <features>
        <notifications>True</notifications>
    </features>
</config>
 INFO     | __main__:test_n1dict_n1list:92 | ['//users[0]/name']                 = "John"
['//users[0]/tags']                 = "admin"
['//users[1]/name']                 = "Jane"
['//users[1]/tags[0]']              = "user"
['//users[1]/tags[1]']              = "active"
['//config/theme']                  = "dark"
['//config/features/notifications'] = "True"
 DEBUG    | __main__:test_n1dict_n1list:95 | _dict['/missing_item'] == None
 INFO     | __main__:test_n1dict_n1list:97 | 1. Testing append_to_path:
 DEBUG    | __main__:test_n1dict_n1list:103 | _dict['users[0]/tags'] == <list 6> [
    #0   "admin",
    #1   "moderator0",
    #2   "moderator1",
    #3   "moderator1",
    #4   "moderator2",
    #5   "moderator3"
]
 DEBUG    | __main__:test_n1dict_n1list:104 | _dict['/users[0]/tags'] == <list 6> [
    #0   "admin",
    #1   "moderator0",
    #2   "moderator1",
    #3   "moderator1",
    #4   "moderator2",
    #5   "moderator3"
]
 DEBUG    | __main__:test_n1dict_n1list:105 | _dict['/users/[0]/tags'] == <list 6> [
    #0   "admin",
    #1   "moderator0",
    #2   "moderator1",
    #3   "moderator1",
    #4   "moderator2",
    #5   "moderator3"
]
 DEBUG    | __main__:test_n1dict_n1list:106 | _dict['/users/tags'] == <list 6> [
    #0   "admin",
    #1   "moderator0",
    #2   "moderator1",
    #3   "moderator1",
    #4   "moderator2",
    #5   "moderator3"
]
 INFO     | __main__:test_n1dict_n1list:108 | 2. Testing to_list:
 DEBUG    | __main__:test_n1dict_n1list:109 | _dict['/config/theme'] == "dark"
 DEBUG    | __main__:test_n1dict_n1list:111 | _dict['/config/theme'] == <list 1> [ #0   "dark" ]
 DEBUG    | __main__:test_n1dict_n1list:113 | _dict['/nonexistent'] == <list 0> [  ]
 INFO     | __main__:test_n1dict_n1list:115 | 3. Testing to_scalar:
 DEBUG    | __main__:test_n1dict_n1list:116 | None
 DEBUG    | __main__:test_n1dict_n1list:118 | _dict['/single_item'] == <list 1> [ #0   "only_one" ]
 DEBUG    | __main__:test_n1dict_n1list:120 | _dict['/single_item'] == "only_one"
 DEBUG    | __main__:test_n1dict_n1list:122 | _dict['/missing_item'] == None
 INFO     | __main__:test_n1dict_n1list:124 | 4. Testing extend_path:
 DEBUG    | __main__:test_n1dict_n1list:125 | _dict['/config/theme'] == <list 1> [ #0   "dark" ]
 DEBUG    | __main__:test_n1dict_n1list:127 | _dict['/config/theme'] == <list 3> [
    #0   "dark",
    #1   "light",
    #2   "auto"
]
 DEBUG    | __main__:test_n1dict_n1list:129 | _dict['/config/theme'] == <list 5> [
    #0   "dark",
    #1   "light",
    #2   "auto",
    #3   "light2",
    #4   "auto2"
]
 INFO     | __main__:test_n1dict_n1list:131 | 5. Testing method chaining:
 DEBUG    | __main__:test_n1dict_n1list:140 | result['/workflow/step1'] == <list 3> [
    #0   "initial",
    #1   "second",
    #2   "third"
]
 INFO     | __main__:test_n1dict_n1list:142 | 6. Complex transformation workflow:
 DEBUG    | __main__:test_n1dict_n1list:144 | workflow_structure['/data'] == "start"
 DEBUG    | __main__:test_n1dict_n1list:146 | workflow_structure['/data'] == <list 2> [
    #0   "start",
    #1   "middle"
]
 DEBUG    | __main__:test_n1dict_n1list:148 | workflow_structure['/data'] == <list 4> [
    #0   "start",
    #1   "middle",
    #2   "end1",
    #3   "end2"
]
 DEBUG    | __main__:test_n1dict_n1list:152 | workflow_structure['/single'] == <list 1> [ #0   "lone_item" ]
 DEBUG    | __main__:test_n1dict_n1list:154 | workflow_structure['/single'] == "lone_item"
 INFO     | __main__:test_n1dict_n1list:156 | 7. Final state:
 DEBUG    | __main__:test_n1dict_n1list:157 | _dict == <n0struct..n1dict 6> {
    "users": <list 2> [
        {"name": "John", "tags": ['admin', 'moderator0', 'moderator1', 'moderator1', 'moderator2', 'moderator3']},
        {"name": "Jane", "tags": ['user', 'active']                                                             }
    ],
    "config": <dict 2> {
        "theme": <list 5> [
            #0   "dark",
            #1   "light",
            #2   "auto",
            #3   "light2",
            #4   "auto2"
        ],
        "features": <dict 1> { "notifications": True }
    },
    "missing_item": None,
    "nonexistent": <list 0> [  ],
    "single_item": "only_one",
    "workflow": <dict 1> {
        "step1": <list 3> [
            #0   "initial",
            #1   "second",
            #2   "third"
        ]
    }
}
 INFO     | __main__:<module>:168 | Mission acomplished
